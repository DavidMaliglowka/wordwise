rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }

    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);

      // Validate user data structure
      allow create: if isAuthenticated()
                   && isOwner(userId)
                   && request.resource.data.keys().hasAll(['uid', 'email', 'tier', 'settings', 'dictionary'])
                   && isValidEmail(request.resource.data.email)
                   && request.resource.data.tier in ['free', 'pro', 'enterprise'];

      allow update: if isAuthenticated()
                   && isOwner(userId)
                   && (!('uid' in request.resource.data) || request.resource.data.uid == userId)
                   && (!('email' in request.resource.data) || isValidEmail(request.resource.data.email));
    }

    // Brand Profiles collection - users can only access their own profiles
    match /brandProfiles/{profileId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.uid);
      allow create: if isAuthenticated()
                   && isOwner(request.resource.data.uid)
                   && request.resource.data.keys().hasAll(['uid', 'name', 'styleGuide', 'samples']);
    }

    // Documents collection - users can only access their own documents
    match /documents/{documentId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.uid);
      allow create: if isAuthenticated()
                   && isOwner(request.resource.data.uid)
                   && request.resource.data.keys().hasAll(['uid', 'title', 'content', 'contentType', 'status'])
                   && request.resource.data.contentType in ['email', 'social', 'general']
                   && request.resource.data.status in ['draft', 'published', 'archived'];

      allow update: if isAuthenticated()
                   && isOwner(resource.data.uid)
                   && (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid);
    }

    // Suggestions collection - users can only access suggestions for their documents
    match /suggestions/{suggestionId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.uid);
      allow create: if isAuthenticated()
                   && isOwner(request.resource.data.uid)
                   && request.resource.data.keys().hasAll(['docId', 'uid', 'range', 'type', 'original', 'proposed', 'explanation', 'confidence', 'status'])
                   && request.resource.data.type in ['grammar', 'spelling', 'passive-voice', 'tone', 'clarity', 'conciseness', 'brand-voice']
                   && request.resource.data.status in ['pending', 'accepted', 'dismissed']
                   && request.resource.data.confidence is number
                   && request.resource.data.confidence >= 0
                   && request.resource.data.confidence <= 1;
    }

    // Metric Snapshots collection - users can only access snapshots for their documents
    match /metricSnapshots/{snapshotId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.uid);
      allow create: if isAuthenticated()
                   && isOwner(request.resource.data.uid)
                   && request.resource.data.keys().hasAll(['docId', 'uid', 'metrics'])
                   && request.resource.data.metrics.keys().hasAll(['wordCount', 'characterCount', 'readingTime', 'fleschKincaidGrade']);
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
